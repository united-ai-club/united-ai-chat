{
  "name": "Website_Chatbot",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "options": {
          "systemMessage": "You are a helpful assistant"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        300,
        -440
      ],
      "id": "90926c8e-8a8e-44c2-93e2-44eb41775b60",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "llama-3.3-70b-versatile",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        300,
        -280
      ],
      "id": "347967d3-a4c6-4f8f-bb20-4f50786ae8f3",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "b6jddQUq5gjN3pRm",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        400,
        -280
      ],
      "id": "046430d4-fb5a-4b46-aa20-d5e9ba92544c",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "Z38wVF3cyYTUhg1n",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        780,
        -440
      ],
      "id": "036600f1-8776-4e67-b3cc-cd674b5c54fc",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "public": true,
        "options": {
          "allowFileUploads": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1320,
        -300
      ],
      "id": "8ae6a18e-0d9d-456d-8cf5-b628c685b209",
      "name": "When chat message received",
      "webhookId": "0cc8882e-c03e-43ba-ab6e-5091dc0f4488"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2fa2579a-e3a3-46f1-b9c3-14b04f1e06c8",
              "name": "chatInput",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1080,
        -300
      ],
      "id": "765f6d59-e398-4a89-8359-1cade7f3d8f3",
      "name": "Get User Message"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -540,
        -540
      ],
      "id": "7cc8fa01-d717-4ee0-9401-9d8f72487e4a",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -360,
        -740
      ],
      "id": "a7126de7-5856-44ee-b1b1-b494731a5ce2",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -200,
        -440
      ],
      "id": "0b0e2743-0d9f-42b9-a7ea-c991a04b7b8c",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "\nlet results = [];\n// for (const item of $input.all()) {\nconst item = $input.first();\nconst binary = item.binary;\n\nif (binary){\n\n    for (const key of Object.keys(item.binary)) {\n\n    \n      if (item.binary[key].mimeType === \"application/pdf\") { \n     // if (item.binary[key].fileExtension === \"pdf\") { \n  \n  \n      results.push({\n            binary: {\n                data: item.binary[key],\n            }\n        });\n       } \n    }\n  \n}else{\n  results.push({json:{\"noting\":\"nothing\"}})\n}\n\nreturn results;\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -820,
        -540
      ],
      "id": "f3086405-6993-4949-a1df-7ef72a8e34b0",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1d9214b5-4871-4e69-99d2-68c1c7858f92",
              "leftValue": "={{ $binary }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1060,
        -480
      ],
      "id": "e81998e6-9a06-44eb-b840-43609ce78852",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "\n// const title = $input.first().json.info.Title;\nconst pdfText = $input.first().json.text\n\nlet prompt = \"\";\n\n\nif(pdfText){\n  prompt += `<pdf-text>${pdfText}</pdf-text>` \n}\n\nprompt += `<user-input>${$input.first().json.chatInput}</user-input>`;\n\nreturn {\"prompt\":prompt }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        20,
        -440
      ],
      "id": "f64255ca-f0a1-4ac3-9c43-d57c493c1e62",
      "name": "Code1"
    }
  ],
  "pinData": {},
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Get User Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Message": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2cce376c-3963-44b5-bfe5-6aa679af01ad",
  "meta": {
    "instanceId": "4bfc52a81b6fbda84aa20d4866cbb66de493d8e054b228f21334d2fe9886112a"
  },
  "id": "zL7oEtPR1qJOMdS1",
  "tags": []
}